// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum onBoardStatus {
  REGISTERED
  PRODUCT
  ACCOUNTS
  COMPLETED
}

model User {
  id             String        @unique @default(uuid())
  firstName      String
  lastName       String
  email          String        @unique
  phoneNumber    String
  state          String
  hashedPassword String
  onBoardStatus  onBoardStatus @default(REGISTERED)
  role           UserRole      @default(BUYER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  product        Product[]
  comments       Comment[]
  UserPhoto      UserPhoto?
  Account        Account?
}

model UserPhoto {
  id      String @unique @default(uuid())
  url     String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique
}

model Account {
  id            String @unique @default(uuid())
  accountName   String
  accountNumber String
  bankName      String
  owner         User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String @unique
}

model Product {
  id               String        @unique @default(uuid())
  productName      String
  price            Int
  quantity         Int
  minOrderQuantity Int
  description      String
  categories       Json?
  discount         Int?
  available        Boolean?      @default(true)
  owner            User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String        
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  comments         Comment[]
  ProductPhoto     ProductPhoto?
}

model ProductPhoto {
  id        String   @unique @default(uuid())
  url       String[]
  owner     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @unique
}

model Comment {
  id        String   @unique @default(uuid())
  comment   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  ownerId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}
